# coding: utf-8

"""
    LokoPay API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2024-08-22
    Contact: dev@lokopay.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from loko_client.models.blockchain_transaction_detail import BlockchainTransactionDetail
from loko_client.models.crypto_currency import CryptoCurrency
from loko_client.models.payment_customer import PaymentCustomer
from typing import Optional, Set
from typing_extensions import Self

class Payment(BaseModel):
    """
    Payment
    """ # noqa: E501
    id: Optional[StrictStr] = None
    object: Optional[StrictStr] = None
    amount: Optional[StrictStr] = None
    currency: Optional[StrictStr] = None
    amount_paid: Optional[StrictStr] = None
    currency_paid: Optional[StrictStr] = None
    amount_due: Optional[StrictStr] = None
    currency_due: Optional[StrictStr] = None
    currency_due_network: Optional[StrictStr] = None
    currency_due_address: Optional[StrictStr] = None
    description: Optional[StrictStr] = None
    customer: Optional[PaymentCustomer] = None
    supported_cryptocurrencies: Optional[List[CryptoCurrency]] = None
    blockchain_transaction_details: Optional[List[BlockchainTransactionDetail]] = None
    price_expires_at: Optional[StrictInt] = None
    expires_at: Optional[StrictInt] = None
    canceled_at: Optional[StrictInt] = None
    status: Optional[StrictStr] = None
    created_at: Optional[StrictInt] = None
    obj_secret: Optional[StrictStr] = None
    failed_reason: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["id", "object", "amount", "currency", "amount_paid", "currency_paid", "amount_due", "currency_due", "currency_due_network", "currency_due_address", "description", "customer", "supported_cryptocurrencies", "blockchain_transaction_details", "price_expires_at", "expires_at", "canceled_at", "status", "created_at", "obj_secret", "failed_reason"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Payment from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of customer
        if self.customer:
            _dict['customer'] = self.customer.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in supported_cryptocurrencies (list)
        _items = []
        if self.supported_cryptocurrencies:
            for _item_supported_cryptocurrencies in self.supported_cryptocurrencies:
                if _item_supported_cryptocurrencies:
                    _items.append(_item_supported_cryptocurrencies.to_dict())
            _dict['supported_cryptocurrencies'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in blockchain_transaction_details (list)
        _items = []
        if self.blockchain_transaction_details:
            for _item_blockchain_transaction_details in self.blockchain_transaction_details:
                if _item_blockchain_transaction_details:
                    _items.append(_item_blockchain_transaction_details.to_dict())
            _dict['blockchain_transaction_details'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Payment from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "object": obj.get("object"),
            "amount": obj.get("amount"),
            "currency": obj.get("currency"),
            "amount_paid": obj.get("amount_paid"),
            "currency_paid": obj.get("currency_paid"),
            "amount_due": obj.get("amount_due"),
            "currency_due": obj.get("currency_due"),
            "currency_due_network": obj.get("currency_due_network"),
            "currency_due_address": obj.get("currency_due_address"),
            "description": obj.get("description"),
            "customer": PaymentCustomer.from_dict(obj["customer"]) if obj.get("customer") is not None else None,
            "supported_cryptocurrencies": [CryptoCurrency.from_dict(_item) for _item in obj["supported_cryptocurrencies"]] if obj.get("supported_cryptocurrencies") is not None else None,
            "blockchain_transaction_details": [BlockchainTransactionDetail.from_dict(_item) for _item in obj["blockchain_transaction_details"]] if obj.get("blockchain_transaction_details") is not None else None,
            "price_expires_at": obj.get("price_expires_at"),
            "expires_at": obj.get("expires_at"),
            "canceled_at": obj.get("canceled_at"),
            "status": obj.get("status"),
            "created_at": obj.get("created_at"),
            "obj_secret": obj.get("obj_secret"),
            "failed_reason": obj.get("failed_reason")
        })
        return _obj


